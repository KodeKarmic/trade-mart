# Example Kubernetes manifests to expose /actuator/prometheus and configure Prometheus Operator
# - Service: exposes the application on port 8080 (adjust as needed)
# - ServiceMonitor: instructs Prometheus Operator to scrape the Service
# - PodMonitor: alternative approach that scrapes pods directly (optional)

apiVersion: v1
kind: Service
metadata:
  name: trade-store-metrics
  namespace: default
  labels:
    app: trade-store
spec:
  selector:
    app: trade-store
  ports:
    - name: prometheus
      port: 8080
      targetPort: 8080
      protocol: TCP

---
# ServiceMonitor for Prometheus Operator
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: trade-store-servicemonitor
  namespace: monitoring
  labels:
    release: prometheus    # adapt to your Prometheus Operator release label
spec:
  selector:
    matchLabels:
      app: trade-store
  namespaceSelector:
    matchNames:
      - default
  endpoints:
    - port: prometheus
      path: /actuator/prometheus
      interval: 30s
      scrapeTimeout: 10s

---
# PodMonitor (alternative) - scrapes pods directly without a Service
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: trade-store-podmonitor
  namespace: monitoring
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app: trade-store
  namespaceSelector:
    matchNames:
      - default
  podMetricsEndpoints:
    - port: prometheus
      path: /actuator/prometheus
      interval: 30s
      scrapeTimeout: 10s

# Notes:
# - Ensure your Deployment/Pod template includes the label `app: trade-store` and exposes the actuator port.
# - The ServiceMonitor/PodMonitor namespace is commonly `monitoring` where Prometheus Operator is deployed,
#   but adjust `namespace` and `namespaceSelector.matchNames` to match your environment.
# - If your app's management port differs (e.g. 8081), change the `port`/`targetPort` and PodMonitor/ServiceMonitor ports.